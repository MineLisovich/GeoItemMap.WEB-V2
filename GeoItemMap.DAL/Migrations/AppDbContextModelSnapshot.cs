// <auto-generated />
using System;
using GeoItemMap.DAL.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GeoItemMap.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GeoItemMap.DAL.Entities.GeoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("X")
                        .HasColumnType("real");

                    b.Property<float>("Y")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("GeoItems", (string)null);
                });

            modelBuilder.Entity("GeoItemMap.DAL.Entities.GNTPandRNTP", b =>
                {
                    b.HasBaseType("GeoItemMap.DAL.Entities.GeoItem");

                    b.Property<string>("AreaImplemOrg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityImplemOrg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryImplemOrg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImplemOrg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InformationExports")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InformationNewProduct")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameNewDevProducts")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameProgramm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameTask")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentImplemOrg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateCustomer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateTask")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Thelevelstructure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("GNTPandRNTPs", (string)null);
                });

            modelBuilder.Entity("GeoItemMap.DAL.Entities.InnProject", b =>
                {
                    b.HasBaseType("GeoItemMap.DAL.Entities.GeoItem");

                    b.Property<decimal?>("AddedValueProject")
                        .IsRequired()
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("AnnualExportVolumeBY")
                        .IsRequired()
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("AnnualExportVolumeEUR")
                        .IsRequired()
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("Criterion1")
                        .IsRequired()
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("Criterion2")
                        .IsRequired()
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool?>("Criterion3")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<string>("Customer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentByWhichGPIR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GPIR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ImportSubstituting")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<string>("InnovatProject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationProjectImplementation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameInnProject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameOrgImplementingProject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("NumberNewJobs")
                        .IsRequired()
                        .HasColumnType("smallint");

                    b.Property<short?>("NumberUpgradedJobs")
                        .IsRequired()
                        .HasColumnType("smallint");

                    b.Property<string>("ProductsRelease")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TermsImplementation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeEconomicActivity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UseTechnologies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ValueAddedPerEmployee")
                        .IsRequired()
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("VolumeFinancing")
                        .IsRequired()
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.ToTable("InnProjects", (string)null);
                });

            modelBuilder.Entity("GeoItemMap.DAL.Entities.Technopark", b =>
                {
                    b.HasBaseType("GeoItemMap.DAL.Entities.GeoItem");

                    b.Property<string>("AddressTechnopark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("AmountFunding")
                        .IsRequired()
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("EmailTechnopark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("FreeAreaPremises")
                        .HasColumnType("real");

                    b.Property<string>("NameTechnopark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("NumberEmployees")
                        .IsRequired()
                        .HasColumnType("smallint");

                    b.Property<string>("PhoneTechnopark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServicesProvided")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TechInfrastructure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TechSpecialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TotalAreaPremises")
                        .HasColumnType("real");

                    b.Property<short?>("TotalNumberResident")
                        .IsRequired()
                        .HasColumnType("smallint");

                    b.Property<string>("TypesProducts")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("VolComplProducts")
                        .IsRequired()
                        .HasColumnType("real");

                    b.Property<string>("WebsiteTechnopark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Technoparks", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            X = 53.604725f,
                            Y = 26.890274f,
                            AddressTechnopark = "220013, Республика Беларусь, г. Минск, ул. Я. Коласа, д. 24, к. 34/1 ",
                            AmountFunding = 17963.4m,
                            EmailTechnopark = "post@park.bntu.by",
                            FreeAreaPremises = 0f,
                            NameTechnopark = "Республиканское инновационное унитарное предприятие «Научно-технологический парк БНТУ «Политехник»",
                            NumberEmployees = (short)168,
                            PhoneTechnopark = "тел. +37517 235-59-74",
                            ServicesProvided = "Инжиниринговые услуги (разработка конструкторской и технологической документации, постановка продукции на производство, регистрация и сертификация продукции). Консультационные услуги. Услуги в сфере управления интеллектуальной собственностью. Услуги по бизнес-планированию и привлечению финансирования. Услуги по продвижению продукции и разработок на рынке. Предоставление в аренду помещений и оборудования",
                            TechInfrastructure = "Технологическое оборудование: технологическое оборудование общепромышленного назначения, оборудование для высокоточной обработки деталей, оборудование для прототипирования, испытательное оборудование; Коворкинг.",
                            TechSpecialization = "Медицинская техника, Технологии модификации поверхностей деталей; Автоматизация и робототехника.",
                            TotalAreaPremises = 3996.6f,
                            TotalNumberResident = (short)16,
                            TypesProducts = "Оборудование для модификации поверхностей; Оборудование для очистки воздуха; Медицинская техника; Материалы для дорожного строительства; Оборудование и материалы для литейного производства и металлургии; Исследования и разработки, инжиниринговые услуги.",
                            VolComplProducts = 18713.6f,
                            WebsiteTechnopark = "http://park.bntu.by/"
                        },
                        new
                        {
                            Id = 2,
                            X = 54.929348f,
                            Y = 29.174215f,
                            AddressTechnopark = "211446, Витебская обл., г. Новополоцк, ул. Блохина, 29/114мк ",
                            AmountFunding = 1310m,
                            EmailTechnopark = "post@park.bntu.by",
                            FreeAreaPremises = 0f,
                            NameTechnopark = "Республиканское инновационное унитарное предприятие «Научно-технологический парк Полоцкого государственного университета» ",
                            NumberEmployees = (short)63,
                            PhoneTechnopark = " ",
                            ServicesProvided = "Сдача в субаренду",
                            TechInfrastructure = "Лаборатория высоких технологий (технологическое оборудование).",
                            TechSpecialization = "Научные исследования и разработки.",
                            TotalAreaPremises = 345.83f,
                            TotalNumberResident = (short)8,
                            TypesProducts = "Софт, продукция металлообработки, светодиодная продукция",
                            VolComplProducts = 2494f,
                            WebsiteTechnopark = "http://park.bntu.by/"
                        });
                });

            modelBuilder.Entity("GeoItemMap.DAL.Entities.TechTransferCenter", b =>
                {
                    b.HasBaseType("GeoItemMap.DAL.Entities.GeoItem");

                    b.Property<string>("AdressTechTransferCenter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("AmountFunding")
                        .IsRequired()
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("EmailTechTransferCenter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameTechTransferCenter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("NumberAcceptedWorkProposals")
                        .IsRequired()
                        .HasColumnType("smallint");

                    b.Property<short?>("NumberAcceptedWorkRequests")
                        .IsRequired()
                        .HasColumnType("smallint");

                    b.Property<short?>("NumberGeneratedProjects")
                        .IsRequired()
                        .HasColumnType("smallint");

                    b.Property<short?>("NumberTransactionsConcluded")
                        .IsRequired()
                        .HasColumnType("smallint");

                    b.Property<string>("PhoneTechTransferCenter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServicesProvidedTechTransferCenter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("VolumeGeneratedProjects")
                        .IsRequired()
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("VolumeTransactionsConcluded")
                        .IsRequired()
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("VolumeWorkPerformed")
                        .IsRequired()
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("WebsiteTechTransferCenter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("TechTransferCenters", (string)null);
                });

            modelBuilder.Entity("GeoItemMap.DAL.Entities.GNTPandRNTP", b =>
                {
                    b.HasOne("GeoItemMap.DAL.Entities.GeoItem", null)
                        .WithOne()
                        .HasForeignKey("GeoItemMap.DAL.Entities.GNTPandRNTP", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GeoItemMap.DAL.Entities.InnProject", b =>
                {
                    b.HasOne("GeoItemMap.DAL.Entities.GeoItem", null)
                        .WithOne()
                        .HasForeignKey("GeoItemMap.DAL.Entities.InnProject", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GeoItemMap.DAL.Entities.Technopark", b =>
                {
                    b.HasOne("GeoItemMap.DAL.Entities.GeoItem", null)
                        .WithOne()
                        .HasForeignKey("GeoItemMap.DAL.Entities.Technopark", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GeoItemMap.DAL.Entities.TechTransferCenter", b =>
                {
                    b.HasOne("GeoItemMap.DAL.Entities.GeoItem", null)
                        .WithOne()
                        .HasForeignKey("GeoItemMap.DAL.Entities.TechTransferCenter", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
